/* tslint:disable */
/* eslint-disable */
/**
 * mangochat
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiKeyConfigRequest,
  ApiResponseApiKeyConfig,
  ApiResponseObject,
  ApiResponsePageResponseApiKeyConfig,
} from '../models/index';
import {
    ApiKeyConfigRequestFromJSON,
    ApiKeyConfigRequestToJSON,
    ApiResponseApiKeyConfigFromJSON,
    ApiResponseApiKeyConfigToJSON,
    ApiResponseObjectFromJSON,
    ApiResponseObjectToJSON,
    ApiResponsePageResponseApiKeyConfigFromJSON,
    ApiResponsePageResponseApiKeyConfigToJSON,
} from '../models/index';

export interface CreateApiKeyRequest {
    authorization?: string;
    apiKeyConfigRequest?: ApiKeyConfigRequest;
}

export interface CreateApiKey0Request {
    authorization?: string;
    apiKeyConfigRequest?: ApiKeyConfigRequest;
}

export interface DeleteApiKeyRequest {
    id: number;
    authorization?: string;
}

export interface DeleteApiKey0Request {
    id: number;
    authorization?: string;
}

export interface GetApiKeyRequest {
    id: number;
    authorization?: string;
}

export interface GetApiKeyListRequest {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetApiKeyList0Request {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetApiKey0Request {
    id: number;
    authorization?: string;
}

/**
 * 
 */
export class APIApi extends runtime.BaseAPI {

    /**
     * 创建新的API密钥配置
     * 创建API密钥
     */
    async createApiKeyRaw(requestParameters: CreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiKeyConfigRequestToJSON(requestParameters['apiKeyConfigRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 创建新的API密钥配置
     * 创建API密钥
     */
    async createApiKey(requestParameters: CreateApiKeyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.createApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新的API密钥配置
     * 创建API密钥
     */
    async createApiKey_1Raw(requestParameters: CreateApiKey0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiKeyConfigRequestToJSON(requestParameters['apiKeyConfigRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 创建新的API密钥配置
     * 创建API密钥
     */
    async createApiKey_1(requestParameters: CreateApiKey0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.createApiKey_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID删除API密钥
     * 删除API密钥
     */
    async deleteApiKeyRaw(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteApiKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据ID删除API密钥
     * 删除API密钥
     */
    async deleteApiKey(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID删除API密钥
     * 删除API密钥
     */
    async deleteApiKey_2Raw(requestParameters: DeleteApiKey0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteApiKey_2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据ID删除API密钥
     * 删除API密钥
     */
    async deleteApiKey_2(requestParameters: DeleteApiKey0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteApiKey_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据API密钥ID查询详细信息
     * 根据ID查询dify API密钥
     */
    async getApiKeyRaw(requestParameters: GetApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseApiKeyConfig>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getApiKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseApiKeyConfigFromJSON(jsonValue));
    }

    /**
     * 根据API密钥ID查询详细信息
     * 根据ID查询dify API密钥
     */
    async getApiKey(requestParameters: GetApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseApiKeyConfig> {
        const response = await this.getApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询API密钥列表
     * 查询API密钥列表
     */
    async getApiKeyListRaw(requestParameters: GetApiKeyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseApiKeyConfig>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseApiKeyConfigFromJSON(jsonValue));
    }

    /**
     * 分页查询API密钥列表
     * 查询API密钥列表
     */
    async getApiKeyList(requestParameters: GetApiKeyListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseApiKeyConfig> {
        const response = await this.getApiKeyListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询API密钥列表
     * 查询API密钥列表
     */
    async getApiKeyList_3Raw(requestParameters: GetApiKeyList0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseApiKeyConfig>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseApiKeyConfigFromJSON(jsonValue));
    }

    /**
     * 分页查询API密钥列表
     * 查询API密钥列表
     */
    async getApiKeyList_3(requestParameters: GetApiKeyList0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseApiKeyConfig> {
        const response = await this.getApiKeyList_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据API密钥ID查询详细信息
     * 根据ID查询dify API密钥
     */
    async getApiKey_4Raw(requestParameters: GetApiKey0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseApiKeyConfig>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getApiKey_4().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseApiKeyConfigFromJSON(jsonValue));
    }

    /**
     * 根据API密钥ID查询详细信息
     * 根据ID查询dify API密钥
     */
    async getApiKey_4(requestParameters: GetApiKey0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseApiKeyConfig> {
        const response = await this.getApiKey_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
