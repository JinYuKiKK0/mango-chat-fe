/* tslint:disable */
/* eslint-disable */
/**
 * mangochat
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiKeyConfigRequest,
  ResponseEntityApiResponse,
} from '../models/index';
import {
    ApiKeyConfigRequestFromJSON,
    ApiKeyConfigRequestToJSON,
    ResponseEntityApiResponseFromJSON,
    ResponseEntityApiResponseToJSON,
} from '../models/index';

export interface ApiAdminApikeyDeleteRequest {
    id: number;
    authorization?: string;
}

export interface ApiAdminApikeyGetRequest {
    id: number;
    authorization?: string;
}

export interface ApiAdminApikeyListGetRequest {
    page: number;
    pageSize: number;
    authorization?: string;
}

export interface ApiAdminApikeyPostRequest {
    authorization?: string;
    apiKeyConfigRequest?: ApiKeyConfigRequest;
}

/**
 * 
 */
export class ApiKeyApi extends runtime.BaseAPI {

    /**
     * 
     * 删除apiKey
     */
    async apiAdminApikeyDeleteRaw(requestParameters: ApiAdminApikeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseEntityApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminApikeyDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseEntityApiResponseFromJSON(jsonValue));
    }

    /**
     * 
     * 删除apiKey
     */
    async apiAdminApikeyDelete(requestParameters: ApiAdminApikeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseEntityApiResponse> {
        const response = await this.apiAdminApikeyDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 根据id查询apiKey
     */
    async apiAdminApikeyGetRaw(requestParameters: ApiAdminApikeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseEntityApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAdminApikeyGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseEntityApiResponseFromJSON(jsonValue));
    }

    /**
     * 
     * 根据id查询apiKey
     */
    async apiAdminApikeyGet(requestParameters: ApiAdminApikeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseEntityApiResponse> {
        const response = await this.apiAdminApikeyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 查询apikey列表
     */
    async apiAdminApikeyListGetRaw(requestParameters: ApiAdminApikeyListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseEntityApiResponse>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling apiAdminApikeyListGet().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling apiAdminApikeyListGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseEntityApiResponseFromJSON(jsonValue));
    }

    /**
     * 
     * 查询apikey列表
     */
    async apiAdminApikeyListGet(requestParameters: ApiAdminApikeyListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseEntityApiResponse> {
        const response = await this.apiAdminApikeyListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 新建apiKey
     */
    async apiAdminApikeyPostRaw(requestParameters: ApiAdminApikeyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseEntityApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/apikey`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiKeyConfigRequestToJSON(requestParameters['apiKeyConfigRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseEntityApiResponseFromJSON(jsonValue));
    }

    /**
     * 
     * 新建apiKey
     */
    async apiAdminApikeyPost(requestParameters: ApiAdminApikeyPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseEntityApiResponse> {
        const response = await this.apiAdminApikeyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
