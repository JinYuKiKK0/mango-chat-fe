/* tslint:disable */
/* eslint-disable */
/**
 * mangochat
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnnouncementRequest,
  ApiResponseAnnouncement,
  ApiResponseConversation,
  ApiResponseGroupResponse,
  ApiResponseInteger,
  ApiResponseListAnnouncementResponse,
  ApiResponseListMapStringObject,
  ApiResponseMapStringObject,
  ApiResponseObject,
  ApiResponsePageResponseAnnouncementResponse,
  ApiResponsePageResponseConversationResponse,
  ApiResponsePageResponseGroupResponse,
  ApiResponsePageResponsePermissionResponse,
  ApiResponsePageResponseRoleResponse,
  ApiResponsePageResponseUserInfoResponse,
  ApiResponsePageResponseWithCursorConversationResponse,
  ApiResponsePermissionResponse,
  ApiResponseRoleResponse,
  ApiResponseSetPermissionResponse,
  ApiResponseUserInfoResponse,
  GroupRequest,
  LoginRequest,
  PermissionRequest,
  RegisterRequest,
  ResetRequest,
  RoleRequest,
  SendCodeRequest,
  UserInfoUpdateRequest,
} from '../models/index';
import {
    AnnouncementRequestFromJSON,
    AnnouncementRequestToJSON,
    ApiResponseAnnouncementFromJSON,
    ApiResponseAnnouncementToJSON,
    ApiResponseConversationFromJSON,
    ApiResponseConversationToJSON,
    ApiResponseGroupResponseFromJSON,
    ApiResponseGroupResponseToJSON,
    ApiResponseIntegerFromJSON,
    ApiResponseIntegerToJSON,
    ApiResponseListAnnouncementResponseFromJSON,
    ApiResponseListAnnouncementResponseToJSON,
    ApiResponseListMapStringObjectFromJSON,
    ApiResponseListMapStringObjectToJSON,
    ApiResponseMapStringObjectFromJSON,
    ApiResponseMapStringObjectToJSON,
    ApiResponseObjectFromJSON,
    ApiResponseObjectToJSON,
    ApiResponsePageResponseAnnouncementResponseFromJSON,
    ApiResponsePageResponseAnnouncementResponseToJSON,
    ApiResponsePageResponseConversationResponseFromJSON,
    ApiResponsePageResponseConversationResponseToJSON,
    ApiResponsePageResponseGroupResponseFromJSON,
    ApiResponsePageResponseGroupResponseToJSON,
    ApiResponsePageResponsePermissionResponseFromJSON,
    ApiResponsePageResponsePermissionResponseToJSON,
    ApiResponsePageResponseRoleResponseFromJSON,
    ApiResponsePageResponseRoleResponseToJSON,
    ApiResponsePageResponseUserInfoResponseFromJSON,
    ApiResponsePageResponseUserInfoResponseToJSON,
    ApiResponsePageResponseWithCursorConversationResponseFromJSON,
    ApiResponsePageResponseWithCursorConversationResponseToJSON,
    ApiResponsePermissionResponseFromJSON,
    ApiResponsePermissionResponseToJSON,
    ApiResponseRoleResponseFromJSON,
    ApiResponseRoleResponseToJSON,
    ApiResponseSetPermissionResponseFromJSON,
    ApiResponseSetPermissionResponseToJSON,
    ApiResponseUserInfoResponseFromJSON,
    ApiResponseUserInfoResponseToJSON,
    GroupRequestFromJSON,
    GroupRequestToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    PermissionRequestFromJSON,
    PermissionRequestToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    ResetRequestFromJSON,
    ResetRequestToJSON,
    RoleRequestFromJSON,
    RoleRequestToJSON,
    SendCodeRequestFromJSON,
    SendCodeRequestToJSON,
    UserInfoUpdateRequestFromJSON,
    UserInfoUpdateRequestToJSON,
} from '../models/index';

export interface AddRolePermissionsRequest {
    id: number;
    authorization?: string;
    requestBody?: Set<number>;
}

export interface AddRolePermissions0Request {
    id: number;
    authorization?: string;
    requestBody?: Set<number>;
}

export interface AddRolesToGroupRequest {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface AddRolesToGroup0Request {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface AddUserRolesRequest {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface AddUserRoles0Request {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface AddUserToGroupRequest {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface AddUserToGroup0Request {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface CreateAnnouncementRequest {
    authorization?: string;
    announcementRequest?: AnnouncementRequest;
}

export interface CreateAnnouncement0Request {
    authorization?: string;
    announcementRequest?: AnnouncementRequest;
}

export interface CreatePermissionRequest {
    authorization?: string;
    permissionRequest?: PermissionRequest;
}

export interface CreatePermission0Request {
    authorization?: string;
    permissionRequest?: PermissionRequest;
}

export interface CreateRoleRequest {
    authorization?: string;
    roleRequest?: RoleRequest;
}

export interface CreateRole0Request {
    authorization?: string;
    roleRequest?: RoleRequest;
}

export interface CreateUserGroupRequest {
    authorization?: string;
    groupRequest?: GroupRequest;
}

export interface CreateUserGroup0Request {
    authorization?: string;
    groupRequest?: GroupRequest;
}

export interface DeleteAnnouncementRequest {
    aId: number;
    authorization?: string;
}

export interface DeleteAnnouncement0Request {
    aId: number;
    authorization?: string;
}

export interface DeletePermissionRequest {
    id: number;
    authorization?: string;
}

export interface DeletePermission0Request {
    id: number;
    authorization?: string;
}

export interface DeleteRoleRequest {
    id: number;
    authorization?: string;
}

export interface DeleteRolePermissionsRequest {
    id: number;
    authorization?: string;
    requestBody?: Set<number>;
}

export interface DeleteRolePermissions0Request {
    id: number;
    authorization?: string;
    requestBody?: Set<number>;
}

export interface DeleteRole0Request {
    id: number;
    authorization?: string;
}

export interface DeleteUserRequest {
    userId: number;
    authorization?: string;
}

export interface DeleteUserGroupRequest {
    id: number;
    authorization?: string;
}

export interface DeleteUserGroup0Request {
    id: number;
    authorization?: string;
}

export interface DeleteUserRolesRequest {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface DeleteUserRoles0Request {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface DeleteUser0Request {
    userId: number;
    authorization?: string;
}

export interface GetAllContextsRequest {
    lastSessionId?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetAllContexts0Request {
    lastSessionId?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetAllPermissionsRequest {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetAllPermissions0Request {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetAnnouncementRequest {
    aId: number;
    authorization?: string;
}

export interface GetAnnouncementListRequest {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetAnnouncementList0Request {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetAnnouncement0Request {
    aId: number;
    authorization?: string;
}

export interface GetAnnouncement1Request {
    aId: number;
    authorization?: string;
}

export interface GetAnnouncement2Request {
    aId: number;
    authorization?: string;
}

export interface GetConversationDetailRequest {
    cId: number;
    authorization?: string;
}

export interface GetConversationDetail0Request {
    cId: number;
    authorization?: string;
}

export interface GetEffectiveAnnouncementsRequest {
    authorization?: string;
}

export interface GetEffectiveAnnouncements0Request {
    authorization?: string;
}

export interface GetPermissionByIdRequest {
    id: number;
    authorization?: string;
}

export interface GetPermissionById0Request {
    id: number;
    authorization?: string;
}

export interface GetRoleByIdRequest {
    id: number;
    authorization?: string;
}

export interface GetRoleById0Request {
    id: number;
    authorization?: string;
}

export interface GetRolePermissionsRequest {
    id: number;
    authorization?: string;
}

export interface GetRolePermissions0Request {
    id: number;
    authorization?: string;
}

export interface GetRoleTypesRequest {
    authorization?: string;
}

export interface GetRoleTypes0Request {
    authorization?: string;
}

export interface GetRolesByGroupIdRequest {
    id: number;
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetRolesByGroupId0Request {
    id: number;
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetRolesListRequest {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetRolesList0Request {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetUserRequest {
    userId: number;
    authorization?: string;
}

export interface GetUserGroupByIdRequest {
    id: number;
    authorization?: string;
}

export interface GetUserGroupById0Request {
    id: number;
    authorization?: string;
}

export interface GetUserGroupListRequest {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetUserGroupList0Request {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetUserInfoRequest {
    userId: number;
    authorization?: string;
}

export interface GetUserInfo0Request {
    userId: number;
    authorization?: string;
}

export interface GetUserListRequest {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetUserList0Request {
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetUserRolesRequest {
    id: number;
    authorization?: string;
}

export interface GetUserRoles0Request {
    id: number;
    authorization?: string;
}

export interface GetUserStatusRequest {
    userId: number;
    authorization?: string;
}

export interface GetUserStatus0Request {
    userId: number;
    authorization?: string;
}

export interface GetUser0Request {
    userId: number;
    authorization?: string;
}

export interface GetUsersByGroupIdRequest {
    id: number;
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface GetUsersByGroupId0Request {
    id: number;
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface LoginOperationRequest {
    authorization?: string;
    loginRequest?: LoginRequest;
}

export interface Login0Request {
    authorization?: string;
    loginRequest?: LoginRequest;
}

export interface RegisterOperationRequest {
    authorization?: string;
    registerRequest?: RegisterRequest;
}

export interface Register0Request {
    authorization?: string;
    registerRequest?: RegisterRequest;
}

export interface RemoveRolesFromGroupRequest {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface RemoveRolesFromGroup0Request {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface RemoveUserFromGroupRequest {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface RemoveUserFromGroup0Request {
    id: number;
    authorization?: string;
    requestBody?: Array<number>;
}

export interface RequestExpansionRequest {
    authorization?: string;
}

export interface RequestExpansion0Request {
    authorization?: string;
}

export interface ResetOperationRequest {
    authorization?: string;
    resetRequest?: ResetRequest;
}

export interface Reset0Request {
    authorization?: string;
    resetRequest?: ResetRequest;
}

export interface SearchConversationsRequest {
    userId?: number;
    keyword?: string;
    startTime?: Date;
    endTime?: Date;
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface SearchConversations0Request {
    userId?: number;
    keyword?: string;
    startTime?: Date;
    endTime?: Date;
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface SearchUsersRequest {
    userId?: number;
    email?: string;
    name?: string;
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface SearchUsers0Request {
    userId?: number;
    email?: string;
    name?: string;
    page?: number;
    pageSize?: number;
    authorization?: string;
}

export interface SendRegisterCodeRequest {
    authorization?: string;
    sendCodeRequest?: SendCodeRequest;
}

export interface SendRegisterCode0Request {
    authorization?: string;
    sendCodeRequest?: SendCodeRequest;
}

export interface SendResetCodeRequest {
    authorization?: string;
    sendCodeRequest?: SendCodeRequest;
}

export interface SendResetCode0Request {
    authorization?: string;
    sendCodeRequest?: SendCodeRequest;
}

export interface UpdateAnnouncementRequest {
    aId: number;
    authorization?: string;
    announcementRequest?: AnnouncementRequest;
}

export interface UpdateAnnouncement0Request {
    aId: number;
    authorization?: string;
    announcementRequest?: AnnouncementRequest;
}

export interface UpdatePermissionRequest {
    id: number;
    authorization?: string;
    permissionRequest?: PermissionRequest;
}

export interface UpdatePermission0Request {
    id: number;
    authorization?: string;
    permissionRequest?: PermissionRequest;
}

export interface UpdateRoleRequest {
    id: number;
    authorization?: string;
    roleRequest?: RoleRequest;
}

export interface UpdateRole0Request {
    id: number;
    authorization?: string;
    roleRequest?: RoleRequest;
}

export interface UpdateUserRequest {
    userId: number;
    authorization?: string;
    userInfoUpdateRequest?: UserInfoUpdateRequest;
}

export interface UpdateUserGroupRequest {
    id: number;
    authorization?: string;
    groupRequest?: GroupRequest;
}

export interface UpdateUserGroup0Request {
    id: number;
    authorization?: string;
    groupRequest?: GroupRequest;
}

export interface UpdateUserStatusRequest {
    userId: number;
    status: number;
    authorization?: string;
}

export interface UpdateUserStatus0Request {
    userId: number;
    status: number;
    authorization?: string;
}

export interface UpdateUser0Request {
    userId: number;
    authorization?: string;
    userInfoUpdateRequest?: UserInfoUpdateRequest;
}

export interface UpdateUser1Request {
    userId: number;
    authorization?: string;
    userInfoUpdateRequest?: UserInfoUpdateRequest;
}

export interface UpdateUser2Request {
    userId: number;
    authorization?: string;
    userInfoUpdateRequest?: UserInfoUpdateRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 批量为角色添加权限
     * 添加角色权限
     */
    async addRolePermissionsRaw(requestParameters: AddRolePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseSetPermissionResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addRolePermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseSetPermissionResponseFromJSON(jsonValue));
    }

    /**
     * 批量为角色添加权限
     * 添加角色权限
     */
    async addRolePermissions(requestParameters: AddRolePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseSetPermissionResponse> {
        const response = await this.addRolePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量为角色添加权限
     * 添加角色权限
     */
    async addRolePermissions_1Raw(requestParameters: AddRolePermissions0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseSetPermissionResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addRolePermissions_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseSetPermissionResponseFromJSON(jsonValue));
    }

    /**
     * 批量为角色添加权限
     * 添加角色权限
     */
    async addRolePermissions_1(requestParameters: AddRolePermissions0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseSetPermissionResponse> {
        const response = await this.addRolePermissions_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量添加角色到指定用户组
     * 添加角色到用户组
     */
    async addRolesToGroupRaw(requestParameters: AddRolesToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addRolesToGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量添加角色到指定用户组
     * 添加角色到用户组
     */
    async addRolesToGroup(requestParameters: AddRolesToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.addRolesToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量添加角色到指定用户组
     * 添加角色到用户组
     */
    async addRolesToGroup_2Raw(requestParameters: AddRolesToGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addRolesToGroup_2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量添加角色到指定用户组
     * 添加角色到用户组
     */
    async addRolesToGroup_2(requestParameters: AddRolesToGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.addRolesToGroup_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量为用户添加角色
     * 添加用户角色
     */
    async addUserRolesRaw(requestParameters: AddUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addUserRoles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量为用户添加角色
     * 添加用户角色
     */
    async addUserRoles(requestParameters: AddUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.addUserRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量为用户添加角色
     * 添加用户角色
     */
    async addUserRoles_3Raw(requestParameters: AddUserRoles0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addUserRoles_3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量为用户添加角色
     * 添加用户角色
     */
    async addUserRoles_3(requestParameters: AddUserRoles0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.addUserRoles_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量添加用户到指定用户组
     * 添加用户到用户组
     */
    async addUserToGroupRaw(requestParameters: AddUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addUserToGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量添加用户到指定用户组
     * 添加用户到用户组
     */
    async addUserToGroup(requestParameters: AddUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.addUserToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量添加用户到指定用户组
     * 添加用户到用户组
     */
    async addUserToGroup_4Raw(requestParameters: AddUserToGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addUserToGroup_4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量添加用户到指定用户组
     * 添加用户到用户组
     */
    async addUserToGroup_4(requestParameters: AddUserToGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.addUserToGroup_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新的公告
     * 创建公告
     */
    async createAnnouncementRaw(requestParameters: CreateAnnouncementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/announcement`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnnouncementRequestToJSON(requestParameters['announcementRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 创建新的公告
     * 创建公告
     */
    async createAnnouncement(requestParameters: CreateAnnouncementRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.createAnnouncementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新的公告
     * 创建公告
     */
    async createAnnouncement_5Raw(requestParameters: CreateAnnouncement0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/announcement`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnnouncementRequestToJSON(requestParameters['announcementRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 创建新的公告
     * 创建公告
     */
    async createAnnouncement_5(requestParameters: CreateAnnouncement0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.createAnnouncement_5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新的权限
     * 创建权限
     */
    async createPermissionRaw(requestParameters: CreatePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePermissionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/permission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionRequestToJSON(requestParameters['permissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePermissionResponseFromJSON(jsonValue));
    }

    /**
     * 创建新的权限
     * 创建权限
     */
    async createPermission(requestParameters: CreatePermissionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePermissionResponse> {
        const response = await this.createPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新的权限
     * 创建权限
     */
    async createPermission_6Raw(requestParameters: CreatePermission0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePermissionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/permission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionRequestToJSON(requestParameters['permissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePermissionResponseFromJSON(jsonValue));
    }

    /**
     * 创建新的权限
     * 创建权限
     */
    async createPermission_6(requestParameters: CreatePermission0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePermissionResponse> {
        const response = await this.createPermission_6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新的角色
     * 创建角色
     */
    async createRoleRaw(requestParameters: CreateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseRoleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleRequestToJSON(requestParameters['roleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 创建新的角色
     * 创建角色
     */
    async createRole(requestParameters: CreateRoleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseRoleResponse> {
        const response = await this.createRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新的角色
     * 创建角色
     */
    async createRole_7Raw(requestParameters: CreateRole0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseRoleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleRequestToJSON(requestParameters['roleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 创建新的角色
     * 创建角色
     */
    async createRole_7(requestParameters: CreateRole0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseRoleResponse> {
        const response = await this.createRole_7Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新的用户组
     * 创建用户组
     */
    async createUserGroupRaw(requestParameters: CreateUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseGroupResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupRequestToJSON(requestParameters['groupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseGroupResponseFromJSON(jsonValue));
    }

    /**
     * 创建新的用户组
     * 创建用户组
     */
    async createUserGroup(requestParameters: CreateUserGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseGroupResponse> {
        const response = await this.createUserGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新的用户组
     * 创建用户组
     */
    async createUserGroup_8Raw(requestParameters: CreateUserGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseGroupResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupRequestToJSON(requestParameters['groupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseGroupResponseFromJSON(jsonValue));
    }

    /**
     * 创建新的用户组
     * 创建用户组
     */
    async createUserGroup_8(requestParameters: CreateUserGroup0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseGroupResponse> {
        const response = await this.createUserGroup_8Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID删除公告
     * 删除公告
     */
    async deleteAnnouncementRaw(requestParameters: DeleteAnnouncementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['aId'] == null) {
            throw new runtime.RequiredError(
                'aId',
                'Required parameter "aId" was null or undefined when calling deleteAnnouncement().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['aId'] != null) {
            queryParameters['a_id'] = requestParameters['aId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/announcement`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据ID删除公告
     * 删除公告
     */
    async deleteAnnouncement(requestParameters: DeleteAnnouncementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteAnnouncementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID删除公告
     * 删除公告
     */
    async deleteAnnouncement_9Raw(requestParameters: DeleteAnnouncement0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['aId'] == null) {
            throw new runtime.RequiredError(
                'aId',
                'Required parameter "aId" was null or undefined when calling deleteAnnouncement_9().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['aId'] != null) {
            queryParameters['a_id'] = requestParameters['aId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/announcement`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据ID删除公告
     * 删除公告
     */
    async deleteAnnouncement_9(requestParameters: DeleteAnnouncement0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteAnnouncement_9Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID删除权限
     * 删除权限
     */
    async deletePermissionRaw(requestParameters: DeletePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/permission/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据ID删除权限
     * 删除权限
     */
    async deletePermission(requestParameters: DeletePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deletePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID删除权限
     * 删除权限
     */
    async deletePermission_10Raw(requestParameters: DeletePermission0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePermission_10().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/permission/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据ID删除权限
     * 删除权限
     */
    async deletePermission_10(requestParameters: DeletePermission0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deletePermission_10Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID删除角色
     * 删除角色
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据ID删除角色
     * 删除角色
     */
    async deleteRole(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量移除角色的权限
     * 移除角色权限
     */
    async deleteRolePermissionsRaw(requestParameters: DeleteRolePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRolePermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量移除角色的权限
     * 移除角色权限
     */
    async deleteRolePermissions(requestParameters: DeleteRolePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteRolePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量移除角色的权限
     * 移除角色权限
     */
    async deleteRolePermissions_11Raw(requestParameters: DeleteRolePermissions0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRolePermissions_11().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量移除角色的权限
     * 移除角色权限
     */
    async deleteRolePermissions_11(requestParameters: DeleteRolePermissions0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteRolePermissions_11Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID删除角色
     * 删除角色
     */
    async deleteRole_12Raw(requestParameters: DeleteRole0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRole_12().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据ID删除角色
     * 删除角色
     */
    async deleteRole_12(requestParameters: DeleteRole0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteRole_12Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID删除用户
     * 删除用户
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据用户ID删除用户
     * 删除用户
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID删除用户组
     * 删除用户组
     */
    async deleteUserGroupRaw(requestParameters: DeleteUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据ID删除用户组
     * 删除用户组
     */
    async deleteUserGroup(requestParameters: DeleteUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteUserGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据ID删除用户组
     * 删除用户组
     */
    async deleteUserGroup_13Raw(requestParameters: DeleteUserGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserGroup_13().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据ID删除用户组
     * 删除用户组
     */
    async deleteUserGroup_13(requestParameters: DeleteUserGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteUserGroup_13Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量移除用户的角色
     * 移除用户角色
     */
    async deleteUserRolesRaw(requestParameters: DeleteUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserRoles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量移除用户的角色
     * 移除用户角色
     */
    async deleteUserRoles(requestParameters: DeleteUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteUserRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量移除用户的角色
     * 移除用户角色
     */
    async deleteUserRoles_14Raw(requestParameters: DeleteUserRoles0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserRoles_14().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量移除用户的角色
     * 移除用户角色
     */
    async deleteUserRoles_14(requestParameters: DeleteUserRoles0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteUserRoles_14Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID删除用户
     * 删除用户
     */
    async deleteUser_15Raw(requestParameters: DeleteUser0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUser_15().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 根据用户ID删除用户
     * 删除用户
     */
    async deleteUser_15(requestParameters: DeleteUser0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.deleteUser_15Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用游标分页查询对话列表
     * 查询对话列表
     */
    async getAllContextsRaw(requestParameters: GetAllContextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseWithCursorConversationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['lastSessionId'] != null) {
            queryParameters['lastSessionId'] = requestParameters['lastSessionId'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/chat/context/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseWithCursorConversationResponseFromJSON(jsonValue));
    }

    /**
     * 使用游标分页查询对话列表
     * 查询对话列表
     */
    async getAllContexts(requestParameters: GetAllContextsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseWithCursorConversationResponse> {
        const response = await this.getAllContextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用游标分页查询对话列表
     * 查询对话列表
     */
    async getAllContexts_16Raw(requestParameters: GetAllContexts0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseWithCursorConversationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['lastSessionId'] != null) {
            queryParameters['lastSessionId'] = requestParameters['lastSessionId'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/chat/context/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseWithCursorConversationResponseFromJSON(jsonValue));
    }

    /**
     * 使用游标分页查询对话列表
     * 查询对话列表
     */
    async getAllContexts_16(requestParameters: GetAllContexts0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseWithCursorConversationResponse> {
        const response = await this.getAllContexts_16Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询权限列表
     * 查询权限列表
     */
    async getAllPermissionsRaw(requestParameters: GetAllPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponsePermissionResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/permission/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponsePermissionResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询权限列表
     * 查询权限列表
     */
    async getAllPermissions(requestParameters: GetAllPermissionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponsePermissionResponse> {
        const response = await this.getAllPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询权限列表
     * 查询权限列表
     */
    async getAllPermissions_17Raw(requestParameters: GetAllPermissions0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponsePermissionResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/permission/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponsePermissionResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询权限列表
     * 查询权限列表
     */
    async getAllPermissions_17(requestParameters: GetAllPermissions0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponsePermissionResponse> {
        const response = await this.getAllPermissions_17Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据公告ID查询公告的详细信息
     * 查询公告详情
     */
    async getAnnouncementRaw(requestParameters: GetAnnouncementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseAnnouncement>> {
        if (requestParameters['aId'] == null) {
            throw new runtime.RequiredError(
                'aId',
                'Required parameter "aId" was null or undefined when calling getAnnouncement().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['aId'] != null) {
            queryParameters['a_id'] = requestParameters['aId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/announcement`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseAnnouncementFromJSON(jsonValue));
    }

    /**
     * 根据公告ID查询公告的详细信息
     * 查询公告详情
     */
    async getAnnouncement(requestParameters: GetAnnouncementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseAnnouncement> {
        const response = await this.getAnnouncementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询公告列表
     * 查询公告列表
     */
    async getAnnouncementListRaw(requestParameters: GetAnnouncementListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseAnnouncementResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/announcement/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseAnnouncementResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询公告列表
     * 查询公告列表
     */
    async getAnnouncementList(requestParameters: GetAnnouncementListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseAnnouncementResponse> {
        const response = await this.getAnnouncementListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询公告列表
     * 查询公告列表
     */
    async getAnnouncementList_18Raw(requestParameters: GetAnnouncementList0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseAnnouncementResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/announcement/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseAnnouncementResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询公告列表
     * 查询公告列表
     */
    async getAnnouncementList_18(requestParameters: GetAnnouncementList0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseAnnouncementResponse> {
        const response = await this.getAnnouncementList_18Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据公告ID查询公告的详细信息
     * 查询公告详情
     */
    async getAnnouncement_19Raw(requestParameters: GetAnnouncement0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseAnnouncement>> {
        if (requestParameters['aId'] == null) {
            throw new runtime.RequiredError(
                'aId',
                'Required parameter "aId" was null or undefined when calling getAnnouncement_19().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['aId'] != null) {
            queryParameters['a_id'] = requestParameters['aId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/announcement`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseAnnouncementFromJSON(jsonValue));
    }

    /**
     * 根据公告ID查询公告的详细信息
     * 查询公告详情
     */
    async getAnnouncement_19(requestParameters: GetAnnouncement0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseAnnouncement> {
        const response = await this.getAnnouncement_19Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据公告ID查询公告详细信息
     * 根据ID查询公告
     */
    async getAnnouncement_20Raw(requestParameters: GetAnnouncement1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseAnnouncement>> {
        if (requestParameters['aId'] == null) {
            throw new runtime.RequiredError(
                'aId',
                'Required parameter "aId" was null or undefined when calling getAnnouncement_20().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['aId'] != null) {
            queryParameters['a_id'] = requestParameters['aId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/announcement`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseAnnouncementFromJSON(jsonValue));
    }

    /**
     * 根据公告ID查询公告详细信息
     * 根据ID查询公告
     */
    async getAnnouncement_20(requestParameters: GetAnnouncement1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseAnnouncement> {
        const response = await this.getAnnouncement_20Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据公告ID查询公告详细信息
     * 根据ID查询公告
     */
    async getAnnouncement_21Raw(requestParameters: GetAnnouncement2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseAnnouncement>> {
        if (requestParameters['aId'] == null) {
            throw new runtime.RequiredError(
                'aId',
                'Required parameter "aId" was null or undefined when calling getAnnouncement_21().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['aId'] != null) {
            queryParameters['a_id'] = requestParameters['aId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/announcement`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseAnnouncementFromJSON(jsonValue));
    }

    /**
     * 根据公告ID查询公告详细信息
     * 根据ID查询公告
     */
    async getAnnouncement_21(requestParameters: GetAnnouncement2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseAnnouncement> {
        const response = await this.getAnnouncement_21Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据对话ID查看对话详细信息
     * 查看对话详情
     */
    async getConversationDetailRaw(requestParameters: GetConversationDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseConversation>> {
        if (requestParameters['cId'] == null) {
            throw new runtime.RequiredError(
                'cId',
                'Required parameter "cId" was null or undefined when calling getConversationDetail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cId'] != null) {
            queryParameters['c_id'] = requestParameters['cId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/chat/context`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseConversationFromJSON(jsonValue));
    }

    /**
     * 根据对话ID查看对话详细信息
     * 查看对话详情
     */
    async getConversationDetail(requestParameters: GetConversationDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseConversation> {
        const response = await this.getConversationDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据对话ID查看对话详细信息
     * 查看对话详情
     */
    async getConversationDetail_22Raw(requestParameters: GetConversationDetail0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseConversation>> {
        if (requestParameters['cId'] == null) {
            throw new runtime.RequiredError(
                'cId',
                'Required parameter "cId" was null or undefined when calling getConversationDetail_22().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cId'] != null) {
            queryParameters['c_id'] = requestParameters['cId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/chat/context`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseConversationFromJSON(jsonValue));
    }

    /**
     * 根据对话ID查看对话详细信息
     * 查看对话详情
     */
    async getConversationDetail_22(requestParameters: GetConversationDetail0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseConversation> {
        const response = await this.getConversationDetail_22Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取所有当前有效的公告列表
     * 查询有效公告列表
     */
    async getEffectiveAnnouncementsRaw(requestParameters: GetEffectiveAnnouncementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListAnnouncementResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/announcement/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseListAnnouncementResponseFromJSON(jsonValue));
    }

    /**
     * 获取所有当前有效的公告列表
     * 查询有效公告列表
     */
    async getEffectiveAnnouncements(requestParameters: GetEffectiveAnnouncementsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListAnnouncementResponse> {
        const response = await this.getEffectiveAnnouncementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取所有当前有效的公告列表
     * 查询有效公告列表
     */
    async getEffectiveAnnouncements_23Raw(requestParameters: GetEffectiveAnnouncements0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListAnnouncementResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/announcement/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseListAnnouncementResponseFromJSON(jsonValue));
    }

    /**
     * 获取所有当前有效的公告列表
     * 查询有效公告列表
     */
    async getEffectiveAnnouncements_23(requestParameters: GetEffectiveAnnouncements0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListAnnouncementResponse> {
        const response = await this.getEffectiveAnnouncements_23Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据权限ID查询详细信息
     * 根据ID查询权限
     */
    async getPermissionByIdRaw(requestParameters: GetPermissionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePermissionResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPermissionById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/permission/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePermissionResponseFromJSON(jsonValue));
    }

    /**
     * 根据权限ID查询详细信息
     * 根据ID查询权限
     */
    async getPermissionById(requestParameters: GetPermissionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePermissionResponse> {
        const response = await this.getPermissionByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据权限ID查询详细信息
     * 根据ID查询权限
     */
    async getPermissionById_24Raw(requestParameters: GetPermissionById0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePermissionResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPermissionById_24().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/permission/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePermissionResponseFromJSON(jsonValue));
    }

    /**
     * 根据权限ID查询详细信息
     * 根据ID查询权限
     */
    async getPermissionById_24(requestParameters: GetPermissionById0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePermissionResponse> {
        const response = await this.getPermissionById_24Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据角色ID查询详细信息
     * 根据ID查询角色
     */
    async getRoleByIdRaw(requestParameters: GetRoleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseRoleResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRoleById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 根据角色ID查询详细信息
     * 根据ID查询角色
     */
    async getRoleById(requestParameters: GetRoleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseRoleResponse> {
        const response = await this.getRoleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据角色ID查询详细信息
     * 根据ID查询角色
     */
    async getRoleById_25Raw(requestParameters: GetRoleById0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseRoleResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRoleById_25().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 根据角色ID查询详细信息
     * 根据ID查询角色
     */
    async getRoleById_25(requestParameters: GetRoleById0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseRoleResponse> {
        const response = await this.getRoleById_25Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询指定角色拥有的权限列表
     * 查询角色权限
     */
    async getRolePermissionsRaw(requestParameters: GetRolePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseSetPermissionResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRolePermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseSetPermissionResponseFromJSON(jsonValue));
    }

    /**
     * 查询指定角色拥有的权限列表
     * 查询角色权限
     */
    async getRolePermissions(requestParameters: GetRolePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseSetPermissionResponse> {
        const response = await this.getRolePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询指定角色拥有的权限列表
     * 查询角色权限
     */
    async getRolePermissions_26Raw(requestParameters: GetRolePermissions0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseSetPermissionResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRolePermissions_26().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseSetPermissionResponseFromJSON(jsonValue));
    }

    /**
     * 查询指定角色拥有的权限列表
     * 查询角色权限
     */
    async getRolePermissions_26(requestParameters: GetRolePermissions0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseSetPermissionResponse> {
        const response = await this.getRolePermissions_26Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取所有可用的角色类型
     * 查询角色类型
     */
    async getRoleTypesRaw(requestParameters: GetRoleTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListMapStringObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseListMapStringObjectFromJSON(jsonValue));
    }

    /**
     * 获取所有可用的角色类型
     * 查询角色类型
     */
    async getRoleTypes(requestParameters: GetRoleTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListMapStringObject> {
        const response = await this.getRoleTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取所有可用的角色类型
     * 查询角色类型
     */
    async getRoleTypes_27Raw(requestParameters: GetRoleTypes0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseListMapStringObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseListMapStringObjectFromJSON(jsonValue));
    }

    /**
     * 获取所有可用的角色类型
     * 查询角色类型
     */
    async getRoleTypes_27(requestParameters: GetRoleTypes0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseListMapStringObject> {
        const response = await this.getRoleTypes_27Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询指定用户组的角色列表
     * 查询用户组角色
     */
    async getRolesByGroupIdRaw(requestParameters: GetRolesByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseRoleResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRolesByGroupId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/roles/list`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询指定用户组的角色列表
     * 查询用户组角色
     */
    async getRolesByGroupId(requestParameters: GetRolesByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseRoleResponse> {
        const response = await this.getRolesByGroupIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询指定用户组的角色列表
     * 查询用户组角色
     */
    async getRolesByGroupId_28Raw(requestParameters: GetRolesByGroupId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseRoleResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRolesByGroupId_28().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/roles/list`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询指定用户组的角色列表
     * 查询用户组角色
     */
    async getRolesByGroupId_28(requestParameters: GetRolesByGroupId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseRoleResponse> {
        const response = await this.getRolesByGroupId_28Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询角色列表
     * 查询角色列表
     */
    async getRolesListRaw(requestParameters: GetRolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseRoleResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询角色列表
     * 查询角色列表
     */
    async getRolesList(requestParameters: GetRolesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseRoleResponse> {
        const response = await this.getRolesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询角色列表
     * 查询角色列表
     */
    async getRolesList_29Raw(requestParameters: GetRolesList0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseRoleResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询角色列表
     * 查询角色列表
     */
    async getRolesList_29(requestParameters: GetRolesList0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseRoleResponse> {
        const response = await this.getRolesList_29Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID查询用户详细信息
     * 根据ID查询用户
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseUserInfoResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseUserInfoResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID查询用户详细信息
     * 根据ID查询用户
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseUserInfoResponse> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户组ID查询详细信息
     * 根据ID查询用户组
     */
    async getUserGroupByIdRaw(requestParameters: GetUserGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseGroupResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserGroupById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseGroupResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户组ID查询详细信息
     * 根据ID查询用户组
     */
    async getUserGroupById(requestParameters: GetUserGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseGroupResponse> {
        const response = await this.getUserGroupByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户组ID查询详细信息
     * 根据ID查询用户组
     */
    async getUserGroupById_30Raw(requestParameters: GetUserGroupById0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseGroupResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserGroupById_30().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseGroupResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户组ID查询详细信息
     * 根据ID查询用户组
     */
    async getUserGroupById_30(requestParameters: GetUserGroupById0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseGroupResponse> {
        const response = await this.getUserGroupById_30Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询用户组列表
     * 查询用户组列表
     */
    async getUserGroupListRaw(requestParameters: GetUserGroupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseGroupResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseGroupResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询用户组列表
     * 查询用户组列表
     */
    async getUserGroupList(requestParameters: GetUserGroupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseGroupResponse> {
        const response = await this.getUserGroupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询用户组列表
     * 查询用户组列表
     */
    async getUserGroupList_31Raw(requestParameters: GetUserGroupList0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseGroupResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseGroupResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询用户组列表
     * 查询用户组列表
     */
    async getUserGroupList_31(requestParameters: GetUserGroupList0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseGroupResponse> {
        const response = await this.getUserGroupList_31Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 用户查询自己的个人信息
     * 查询个人信息
     */
    async getUserInfoRaw(requestParameters: GetUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseUserInfoResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/users/self`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseUserInfoResponseFromJSON(jsonValue));
    }

    /**
     * 用户查询自己的个人信息
     * 查询个人信息
     */
    async getUserInfo(requestParameters: GetUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseUserInfoResponse> {
        const response = await this.getUserInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 用户查询自己的个人信息
     * 查询个人信息
     */
    async getUserInfo_32Raw(requestParameters: GetUserInfo0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseUserInfoResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserInfo_32().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/users/self`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseUserInfoResponseFromJSON(jsonValue));
    }

    /**
     * 用户查询自己的个人信息
     * 查询个人信息
     */
    async getUserInfo_32(requestParameters: GetUserInfo0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseUserInfoResponse> {
        const response = await this.getUserInfo_32Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询用户列表
     * 查询用户列表
     */
    async getUserListRaw(requestParameters: GetUserListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseUserInfoResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseUserInfoResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询用户列表
     * 查询用户列表
     */
    async getUserList(requestParameters: GetUserListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseUserInfoResponse> {
        const response = await this.getUserListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询用户列表
     * 查询用户列表
     */
    async getUserList_33Raw(requestParameters: GetUserList0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseUserInfoResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseUserInfoResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询用户列表
     * 查询用户列表
     */
    async getUserList_33(requestParameters: GetUserList0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseUserInfoResponse> {
        const response = await this.getUserList_33Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询用户拥有的角色信息
     * 查询用户角色
     */
    async getUserRolesRaw(requestParameters: GetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseRoleResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserRoles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 查询用户拥有的角色信息
     * 查询用户角色
     */
    async getUserRoles(requestParameters: GetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseRoleResponse> {
        const response = await this.getUserRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询用户拥有的角色信息
     * 查询用户角色
     */
    async getUserRoles_34Raw(requestParameters: GetUserRoles0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseRoleResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserRoles_34().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 查询用户拥有的角色信息
     * 查询用户角色
     */
    async getUserRoles_34(requestParameters: GetUserRoles0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseRoleResponse> {
        const response = await this.getUserRoles_34Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询用户的封禁状态
     * 查询用户状态
     */
    async getUserStatusRaw(requestParameters: GetUserStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseInteger>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseIntegerFromJSON(jsonValue));
    }

    /**
     * 查询用户的封禁状态
     * 查询用户状态
     */
    async getUserStatus(requestParameters: GetUserStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseInteger> {
        const response = await this.getUserStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询用户的封禁状态
     * 查询用户状态
     */
    async getUserStatus_35Raw(requestParameters: GetUserStatus0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseInteger>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserStatus_35().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseIntegerFromJSON(jsonValue));
    }

    /**
     * 查询用户的封禁状态
     * 查询用户状态
     */
    async getUserStatus_35(requestParameters: GetUserStatus0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseInteger> {
        const response = await this.getUserStatus_35Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID查询用户详细信息
     * 根据ID查询用户
     */
    async getUser_36Raw(requestParameters: GetUser0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseUserInfoResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUser_36().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseUserInfoResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID查询用户详细信息
     * 根据ID查询用户
     */
    async getUser_36(requestParameters: GetUser0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseUserInfoResponse> {
        const response = await this.getUser_36Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询指定用户组的成员列表
     * 查询用户组成员
     */
    async getUsersByGroupIdRaw(requestParameters: GetUsersByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseUserInfoResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUsersByGroupId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/members/list`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseUserInfoResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询指定用户组的成员列表
     * 查询用户组成员
     */
    async getUsersByGroupId(requestParameters: GetUsersByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseUserInfoResponse> {
        const response = await this.getUsersByGroupIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询指定用户组的成员列表
     * 查询用户组成员
     */
    async getUsersByGroupId_37Raw(requestParameters: GetUsersByGroupId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseUserInfoResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUsersByGroupId_37().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/members/list`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseUserInfoResponseFromJSON(jsonValue));
    }

    /**
     * 分页查询指定用户组的成员列表
     * 查询用户组成员
     */
    async getUsersByGroupId_37(requestParameters: GetUsersByGroupId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseUserInfoResponse> {
        const response = await this.getUsersByGroupId_37Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 通过邮箱和密码进行用户身份验证
     * 用户登录
     */
    async loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMapStringObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseMapStringObjectFromJSON(jsonValue));
    }

    /**
     * 通过邮箱和密码进行用户身份验证
     * 用户登录
     */
    async login(requestParameters: LoginOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMapStringObject> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 通过邮箱和密码进行用户身份验证
     * 用户登录
     */
    async login_38Raw(requestParameters: Login0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseMapStringObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseMapStringObjectFromJSON(jsonValue));
    }

    /**
     * 通过邮箱和密码进行用户身份验证
     * 用户登录
     */
    async login_38(requestParameters: Login0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseMapStringObject> {
        const response = await this.login_38Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用邮箱验证码完成用户注册
     * 用户注册
     */
    async registerRaw(requestParameters: RegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 使用邮箱验证码完成用户注册
     * 用户注册
     */
    async register(requestParameters: RegisterOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用邮箱验证码完成用户注册
     * 用户注册
     */
    async register_39Raw(requestParameters: Register0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 使用邮箱验证码完成用户注册
     * 用户注册
     */
    async register_39(requestParameters: Register0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.register_39Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量从用户组中移除角色
     * 从用户组移除角色
     */
    async removeRolesFromGroupRaw(requestParameters: RemoveRolesFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeRolesFromGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量从用户组中移除角色
     * 从用户组移除角色
     */
    async removeRolesFromGroup(requestParameters: RemoveRolesFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.removeRolesFromGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量从用户组中移除角色
     * 从用户组移除角色
     */
    async removeRolesFromGroup_40Raw(requestParameters: RemoveRolesFromGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeRolesFromGroup_40().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量从用户组中移除角色
     * 从用户组移除角色
     */
    async removeRolesFromGroup_40(requestParameters: RemoveRolesFromGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.removeRolesFromGroup_40Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量从用户组中移除用户
     * 从用户组移除用户
     */
    async removeUserFromGroupRaw(requestParameters: RemoveUserFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeUserFromGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量从用户组中移除用户
     * 从用户组移除用户
     */
    async removeUserFromGroup(requestParameters: RemoveUserFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.removeUserFromGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量从用户组中移除用户
     * 从用户组移除用户
     */
    async removeUserFromGroup_41Raw(requestParameters: RemoveUserFromGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeUserFromGroup_41().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 批量从用户组中移除用户
     * 从用户组移除用户
     */
    async removeUserFromGroup_41(requestParameters: RemoveUserFromGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.removeUserFromGroup_41Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 用户申请增加对话次数限制
     * 申请扩容
     */
    async requestExpansionRaw(requestParameters: RequestExpansionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/users/expansion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 用户申请增加对话次数限制
     * 申请扩容
     */
    async requestExpansion(requestParameters: RequestExpansionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.requestExpansionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 用户申请增加对话次数限制
     * 申请扩容
     */
    async requestExpansion_42Raw(requestParameters: RequestExpansion0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/users/expansion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 用户申请增加对话次数限制
     * 申请扩容
     */
    async requestExpansion_42(requestParameters: RequestExpansion0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.requestExpansion_42Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用邮箱验证码重置用户密码
     * 重置密码
     */
    async resetRaw(requestParameters: ResetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/auth/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetRequestToJSON(requestParameters['resetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 使用邮箱验证码重置用户密码
     * 重置密码
     */
    async reset(requestParameters: ResetOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.resetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用邮箱验证码重置用户密码
     * 重置密码
     */
    async reset_43Raw(requestParameters: Reset0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/auth/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetRequestToJSON(requestParameters['resetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 使用邮箱验证码重置用户密码
     * 重置密码
     */
    async reset_43(requestParameters: Reset0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.reset_43Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID、关键词、时间范围搜索对话记录
     * 搜索对话记录
     */
    async searchConversationsRaw(requestParameters: SearchConversationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseConversationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['keyword'] != null) {
            queryParameters['keyword'] = requestParameters['keyword'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = (requestParameters['startTime'] as any).toISOString();
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = (requestParameters['endTime'] as any).toISOString();
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/chat/context/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseConversationResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID、关键词、时间范围搜索对话记录
     * 搜索对话记录
     */
    async searchConversations(requestParameters: SearchConversationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseConversationResponse> {
        const response = await this.searchConversationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID、关键词、时间范围搜索对话记录
     * 搜索对话记录
     */
    async searchConversations_44Raw(requestParameters: SearchConversations0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseConversationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['keyword'] != null) {
            queryParameters['keyword'] = requestParameters['keyword'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = (requestParameters['startTime'] as any).toISOString();
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = (requestParameters['endTime'] as any).toISOString();
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/chat/context/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseConversationResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID、关键词、时间范围搜索对话记录
     * 搜索对话记录
     */
    async searchConversations_44(requestParameters: SearchConversations0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseConversationResponse> {
        const response = await this.searchConversations_44Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID、邮箱、用户名搜索用户
     * 搜索用户
     */
    async searchUsersRaw(requestParameters: SearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseUserInfoResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseUserInfoResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID、邮箱、用户名搜索用户
     * 搜索用户
     */
    async searchUsers(requestParameters: SearchUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseUserInfoResponse> {
        const response = await this.searchUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID、邮箱、用户名搜索用户
     * 搜索用户
     */
    async searchUsers_45Raw(requestParameters: SearchUsers0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePageResponseUserInfoResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePageResponseUserInfoResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID、邮箱、用户名搜索用户
     * 搜索用户
     */
    async searchUsers_45(requestParameters: SearchUsers0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePageResponseUserInfoResponse> {
        const response = await this.searchUsers_45Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 向用户邮箱发送注册验证码
     * 发送注册验证码
     */
    async sendRegisterCodeRaw(requestParameters: SendRegisterCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/auth/sendRegisterCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendCodeRequestToJSON(requestParameters['sendCodeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 向用户邮箱发送注册验证码
     * 发送注册验证码
     */
    async sendRegisterCode(requestParameters: SendRegisterCodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.sendRegisterCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 向用户邮箱发送注册验证码
     * 发送注册验证码
     */
    async sendRegisterCode_46Raw(requestParameters: SendRegisterCode0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/auth/sendRegisterCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendCodeRequestToJSON(requestParameters['sendCodeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 向用户邮箱发送注册验证码
     * 发送注册验证码
     */
    async sendRegisterCode_46(requestParameters: SendRegisterCode0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.sendRegisterCode_46Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 向已注册用户邮箱发送密码重置验证码
     * 发送密码重置验证码
     */
    async sendResetCodeRaw(requestParameters: SendResetCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/auth/sendResetCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendCodeRequestToJSON(requestParameters['sendCodeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 向已注册用户邮箱发送密码重置验证码
     * 发送密码重置验证码
     */
    async sendResetCode(requestParameters: SendResetCodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.sendResetCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 向已注册用户邮箱发送密码重置验证码
     * 发送密码重置验证码
     */
    async sendResetCode_47Raw(requestParameters: SendResetCode0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/auth/sendResetCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendCodeRequestToJSON(requestParameters['sendCodeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 向已注册用户邮箱发送密码重置验证码
     * 发送密码重置验证码
     */
    async sendResetCode_47(requestParameters: SendResetCode0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.sendResetCode_47Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新公告信息
     * 更新公告
     */
    async updateAnnouncementRaw(requestParameters: UpdateAnnouncementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['aId'] == null) {
            throw new runtime.RequiredError(
                'aId',
                'Required parameter "aId" was null or undefined when calling updateAnnouncement().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['aId'] != null) {
            queryParameters['a_id'] = requestParameters['aId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/announcement`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnnouncementRequestToJSON(requestParameters['announcementRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 更新公告信息
     * 更新公告
     */
    async updateAnnouncement(requestParameters: UpdateAnnouncementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.updateAnnouncementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新公告信息
     * 更新公告
     */
    async updateAnnouncement_48Raw(requestParameters: UpdateAnnouncement0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['aId'] == null) {
            throw new runtime.RequiredError(
                'aId',
                'Required parameter "aId" was null or undefined when calling updateAnnouncement_48().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['aId'] != null) {
            queryParameters['a_id'] = requestParameters['aId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/announcement`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnnouncementRequestToJSON(requestParameters['announcementRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 更新公告信息
     * 更新公告
     */
    async updateAnnouncement_48(requestParameters: UpdateAnnouncement0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.updateAnnouncement_48Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新权限信息
     * 更新权限
     */
    async updatePermissionRaw(requestParameters: UpdatePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePermissionResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/permission/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionRequestToJSON(requestParameters['permissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePermissionResponseFromJSON(jsonValue));
    }

    /**
     * 更新权限信息
     * 更新权限
     */
    async updatePermission(requestParameters: UpdatePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePermissionResponse> {
        const response = await this.updatePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新权限信息
     * 更新权限
     */
    async updatePermission_49Raw(requestParameters: UpdatePermission0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponsePermissionResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePermission_49().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/permission/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionRequestToJSON(requestParameters['permissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponsePermissionResponseFromJSON(jsonValue));
    }

    /**
     * 更新权限信息
     * 更新权限
     */
    async updatePermission_49(requestParameters: UpdatePermission0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponsePermissionResponse> {
        const response = await this.updatePermission_49Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新角色信息
     * 更新角色
     */
    async updateRoleRaw(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseRoleResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleRequestToJSON(requestParameters['roleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 更新角色信息
     * 更新角色
     */
    async updateRole(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseRoleResponse> {
        const response = await this.updateRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新角色信息
     * 更新角色
     */
    async updateRole_50Raw(requestParameters: UpdateRole0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseRoleResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateRole_50().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleRequestToJSON(requestParameters['roleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseRoleResponseFromJSON(jsonValue));
    }

    /**
     * 更新角色信息
     * 更新角色
     */
    async updateRole_50(requestParameters: UpdateRole0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseRoleResponse> {
        const response = await this.updateRole_50Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 用户更新自己的个人信息
     * 更新个人信息
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/users/self`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserInfoUpdateRequestToJSON(requestParameters['userInfoUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 用户更新自己的个人信息
     * 更新个人信息
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新用户组信息
     * 更新用户组
     */
    async updateUserGroupRaw(requestParameters: UpdateUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseGroupResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateUserGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupRequestToJSON(requestParameters['groupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseGroupResponseFromJSON(jsonValue));
    }

    /**
     * 更新用户组信息
     * 更新用户组
     */
    async updateUserGroup(requestParameters: UpdateUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseGroupResponse> {
        const response = await this.updateUserGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新用户组信息
     * 更新用户组
     */
    async updateUserGroup_51Raw(requestParameters: UpdateUserGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseGroupResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateUserGroup_51().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupRequestToJSON(requestParameters['groupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseGroupResponseFromJSON(jsonValue));
    }

    /**
     * 更新用户组信息
     * 更新用户组
     */
    async updateUserGroup_51(requestParameters: UpdateUserGroup0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseGroupResponse> {
        const response = await this.updateUserGroup_51Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新用户的封禁状态
     * 更新用户状态
     */
    async updateUserStatusRaw(requestParameters: UpdateUserStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUserStatus().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling updateUserStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 更新用户的封禁状态
     * 更新用户状态
     */
    async updateUserStatus(requestParameters: UpdateUserStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.updateUserStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新用户的封禁状态
     * 更新用户状态
     */
    async updateUserStatus_52Raw(requestParameters: UpdateUserStatus0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUserStatus_52().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling updateUserStatus_52().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user/status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 更新用户的封禁状态
     * 更新用户状态
     */
    async updateUserStatus_52(requestParameters: UpdateUserStatus0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.updateUserStatus_52Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 用户更新自己的个人信息
     * 更新个人信息
     */
    async updateUser_53Raw(requestParameters: UpdateUser0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUser_53().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/users/self`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserInfoUpdateRequestToJSON(requestParameters['userInfoUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 用户更新自己的个人信息
     * 更新个人信息
     */
    async updateUser_53(requestParameters: UpdateUser0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.updateUser_53Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新用户信息
     * 更新用户
     */
    async updateUser_54Raw(requestParameters: UpdateUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUser_54().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserInfoUpdateRequestToJSON(requestParameters['userInfoUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 更新用户信息
     * 更新用户
     */
    async updateUser_54(requestParameters: UpdateUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.updateUser_54Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新用户信息
     * 更新用户
     */
    async updateUser_55Raw(requestParameters: UpdateUser2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseObject>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateUser_55().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/api/admin/user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserInfoUpdateRequestToJSON(requestParameters['userInfoUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseObjectFromJSON(jsonValue));
    }

    /**
     * 更新用户信息
     * 更新用户
     */
    async updateUser_55(requestParameters: UpdateUser2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseObject> {
        const response = await this.updateUser_55Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
